Metadata-Version: 2.1
Name: VRP
Version: 0.1.dev0
Summary: UNKNOWN
Home-page: UNKNOWN
License: UNKNOWN
Platform: UNKNOWN

# VRP

Repository with functions to do VRP operations.

Developer: Sakshi Singh (sakshisingh1809@gmail.com)

---

---

Rules / Conventions:

# Time-index

The name, and the type of data, used for the index, is standardized in order to more quickly identify what its values mean. Exactly how depends on the situation, which is one of the following three.

## Specific, single moment or period in time

* These are values that describe a **specific moment in time** (e.g. 2020-04-21 15:32) or a **specific period in time** (e.g. 2020-04-21 15:00 till 16:00).
* The index values are encoded with **datetime timestamps**. Whenever possible, the timezone should be included.

* The following names can be used for the index:

  - `ts`: *timezone-aware* timestamp denoting a *moment* in time.
  - `ts_left`: *timezone-aware* timestamp denoting (the start of) a *period* in time. (`ts_right` if it's the end of the period; should be avoided.)
  - `ts_local`: *timezone-agnostic* timestamp denoting a *moment* in time.
  - `ts_left_local`: *timezone-agnostic* timestamp denoting (the start of) a *period* in time. (`ts_right_local` if it's the end of the period; should be avoided.)

* Example: time series or dataframe that contains historic temperatures, or the price-forward-curve, or historic prices. Like this historic spot price time series:

  ```
  ts_left
  2010-01-01 00:00:00+01:00    26.25
  2010-01-01 01:00:00+01:00    18.46
  2010-01-01 02:00:00+01:00    20.08
                               ...
  2019-12-31 21:00:00+01:00    39.74
  2019-12-31 22:00:00+01:00    38.88
  2019-12-31 23:00:00+01:00    37.39
  Freq: H, Name: p_spot, Length: 87648, dtype:float64
  ```

## Time of day

* These are values for which the **day is irrelevant**. They describe a time (e.g. 15:32) or time period (e.g. 15:00 till 16:00) within a (any) day.

* The index values are encoded with `datetime.time` objects. They do not (i.e., cannot) include timezone information.

* The following names can be used for the index:

  * `time_local`: denoting a *moment* during the day.
  * `time_left_local`: denoting a *period* during the day.

* A time is always local, i.e., timezone- and daylight-savings-time-unaware.

* Example: time series or dataframe describing how consumption of energy changes with (among other) the time of day. Like this temperature dependent load profile:

  ```
                        -17       -16  ...
  time_left_local                      ...
  00:00:00         3.698160  3.636973  ...
  00:15:00         3.927253  3.862267  ...
  00:30:00         3.927253  3.862267  ...
                    ...       ...      ...
  23:15:00         2.983240  2.866293  ...
  23:30:00         3.246533  3.136160  ...
  23:45:00         3.475627  3.373213  ...
  ```

## Missing date or time component

* If point in time contains an **undefined 'large-scale' time component**, while having a defined 'lower-scale' time component.

* For example, if the average monthly temperature over several years. In that case, the time series only has a 'month' component, while missing the 'year' component, so it cannot be specified as a datetime object. 

* Therefore, the index used is a (multi-)index, and its values are **integers**.

* The following names can be used for the index:

  * `YY` for the year
  * `QQ` for the quarter-of-year (1..4)
  * `MM` for the month-of-year (1..12)
  * `DD` for the day-of-month (1..31)
  * `H` for the hour-of-day (0..23)
  * `QH` for the quarterhour-of-day (0..95)
  * `M` for the minute-of-hour (0..59)
  * `S` for the second-of-minute (0..59)

* Example: time series with average monthly temperature over several years: index only has `MM` level. Or this time series with standard temperature year: index has `MM` and `DD` levels:

  ```
  MM  DD
  1   1     2.791667
      2     0.975000
      3    -0.766667
               ...
  12  29    6.875000
      30    8.820833
      31    7.120833
  Name: t, Length: 366, dtype: float64
  ```

* As noted above; a time or datetime value is preferably used instead of these integer indices, but sometimes a time or datetime needs to be converted to a multiindex of integers in order to do better merging.

# Checklist for timeseries and dataframes containing timeseries

* Index:
  * Index has name.
  * If index values are timestamps denoting a moment in time: 
    * Name is `ts` or `ts_local`.
  * If index values are timestamp denoting a time period:
    - Name is `ts_left` or `ts_left_local`;
    - `.index.freq` is set.
  * If index values are times denoting a moment during the (any) day:
    - Name is `time_local`.
  * If index values are times denoting a time period during the (any) day:
    - Name is `time_left_local`;
    - `.index.freq` is set.
  * If index values are a part of a timestamp or time:
    - Name is `YY`, `QQ`, `MM`, `DD`, `H`, `QH`, `M`, or `S`.
* Series name:
  * If values are in MWh, name should be `q` or start with `q_`
  * If values are in MW, name should be `w` or start with `w_`
  * If values are in Eur, name should be `r` or start with `r_`
  * If values are in Eur/MWh, name should be `p` or start with `p_`
  * If values are in degC, name should be `t` or start with `t_`
  * If values are not in one of these units, the name should not be `q`, `w`, `r`, `p`, or `t` and should not start with `q_`, `w_`, `r_`, `p_`, or `t_`.
* Column names for dataframe:
  * Same as series name.



---

Implementation details

# Extended `pandas` functionality

* `DataFrame` and `Series` are extended with a `.duration` property, which returns the duration of each current timestamp in hours.

  This removes the necessity of adding a dedicated column to the dataframe just to store this type of data (or to repeatedly calculate it manually).

---

(to do, but in separate object)

* `DataFrame` and `Series` are extended with a `.q` property, which returns a Series with the quantity [MWh] of each timestamp. It calculates these by, for a DataFrame, multiplying its column `'w'` with its`.index.duration`. And for a Series, multiplying it with its `.index.duration`, if its name is `'w'` or starts with `w_`. (For both: unless a column `'q'` exists; in that case, that column is returned.)

  This removes the necessity of creating and storing both power [MW] and quantity [MWh] columns, which are redundant.
  
* `DataFrame` is extended with a `.r` property, which returns a Series with the quantity [Eur] of each timestamp. It calculates these by multiplying its columns `'q'` and `'p'`. (Unless a column `'r'` exists; in that case, that column is returned.)

  This removes the necessity of storing this property if it can be both power [MW] and quantity [MWh] columns, which are redundant.

---



